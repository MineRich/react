import{o as l,c as a,k as n,q as r,s as c,z as e,e as t,a6 as o}from"../modules/vue-VobkUfoe.js";import{I as i}from"./default-DuQ-TNJr.js";import{_,a9 as s}from"../index-CTdPq7G_.js";import{p as u,u as p,f as d}from"./context-jSeM-G4r.js";import"../modules/shiki-ZI2AGyxg.js";const m=t("h1",null,"React简史",-1),f=t("h6",null,"后React时代",-1),h=t("div",{style:{"margin-top":"10px"}},null,-1),S=t("p",null,"前端框架大战的导火索：",-1),R=t("blockquote",null,[t("p",null,"PHP社区的大佬“Laravel”之父泰勒在勇闯 React 新手村的时候一脸懵逼。")],-1),x=t("div",{style:{"margin-top":"10px"}},null,-1),g=t("ol",{style:{"font-size":"16px"}},[t("li",null,"后端编程语言普遍拥抱面向对象编程，虽然 React 早期支持类式组件的写法，但 React 16 之后提出的 React Hook 则拥抱函数式编程，比较反直觉。"),t("li",null,"React 的 JSX 都涉嫌违背“关注点分离”的开发原则。传统前端开发中，HTML + CSS + JS 分而治之，结构、样式和逻辑隔离在不同的文件中维护，这是一种“关注点分离”的最佳实践。但是 React 的 JSX 将三者全部塞到 DSL 的单一文件中。虽然 Vue 的 SFC 也违背了这一原则，但是React更加偏激，因为 JSX 的设计哲学是万物皆可JS。")],-1),v=t("div",{style:{"margin-top":"10px"}},null,-1),J=t("ul",null,[t("li",null,[t("strong",null,"后端程序员"),o(" 从面型对象编程切换到函数式编程、从 HTML + CSS + JS 切换到“万物皆可 JSX”的过程中，需要克服技术上范式转变和路径依赖的阻力。")]),t("li",null,[t("strong",null,"前端程序员"),o(" React 在泛函编程和关注点分离的道路上，走得比 Vue 更快、更远。")])],-1),k=t("p",null,[t("strong",null,"React 其实并不是框架，只是一个工具库")],-1),y={__name:"4",setup(C){return u(s),p(),(L,P)=>(l(),a(i,r(c(e(d)(e(s),3))),{default:n(()=>[m,f,h,S,R,x,g,v,J,k]),_:1},16))}},B=_(y,[["__file","/@slidev/slides/4.md"]]);export{B as default};
